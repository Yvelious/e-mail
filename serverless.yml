service:
  name: e-mail

plugins:
  - serverless-offline
  - serverless-pseudo-parameters
  
# the custom section
custom:
  stage: ${self:provider.stage, env:STAGE, 'dev'}
  serverless-offline:
    host: 0.0.0.0
    port: ${self:provider.port, env:PORT, '3001'}
  

package:
  include:
    - build/**/*
  exclude:
    - .infrastructure_temp/**/*
    - build/main/**/*

provider:
  region: eu-west-1
  stackName: ${self:service.name}-${self:provider.stage, env:STAGE, 'dev'}
  apiName: ${self:service.name}-${self:provider.stage, env:STAGE, 'dev'}-api
  accountId: "infrcomp-#{AWS::AccountId}-"
  staticBucket: ${self:provider.accountId}e-mail-${self:provider.stage, env:STAGE, 'dev'}
  environment:
    STAGE: ${self:provider.stage, env:STAGE, 'dev'}
    STAGE_PATH: ${self:provider.stage_path, env:STAGE_PATH, ''}
    DOMAIN_URL: { "Fn::Join" : ["", [" https://#{ApiGatewayRestApi}", ".execute-api.eu-west-1.amazonaws.com/${self:provider.stage, env:STAGE, 'dev'}" ] ]  }
    BUCKET_ID: ${self:provider.staticBucket}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:Get*
        - s3:List*
      Resource: "*"
  name: aws
  runtime: nodejs10.x
  timeout: 120
  
functions:
  server:
    handler: build/server/server.default
    events:
      - http: 'POST /subscribe'
      - http: 'ANY {proxy+}'
      - cors: true
    role: ServiceOrientedAppLambdaRole

resources:
  Resources:
    StaticBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.staticBucket}
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
                - GET
              AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"
    StaticBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: StaticBucket
        PolicyDocument:
          Statement:
            Sid: PublicReadGetObject
            Effect: Allow
            Principal: "*"
            Action:
              - s3:GetObject
            Resource:
              Fn::Join: ["", ["arn:aws:s3:::", {"Ref": "StaticBucket" }, "/*"]]
    ServiceOrientedAppLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service}-${self:provider.stage, env:STAGE, 'dev'}-ServiceOrientedAppLambdaRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: ${self:service}-${self:provider.stage, env:STAGE, 'dev'}-ServiceOrientedAppLambdaPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "logs:*"
                    - "cloudwatch:*"
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - s3:Get*
                    - s3:List*
                    - s3:Put*
                    - s3:Delete*
                  Resource:
                    Fn::Join: ["", ["arn:aws:s3:::", {"Ref": "StaticBucket" }, "/*"]]
                - Effect: Allow
                  Action:
                    - "ses:SendEmail"
                    - "ses:SendRawEmail"
                  Resource: "arn:aws:ses:eu-west-1:604800795243:identity/mail@frankzickert.de"

